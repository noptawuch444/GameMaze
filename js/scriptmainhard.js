let grid = [
  [0, 1, 0, 1, 0, 1, 0, 1, 0],
  [0, 1, 0, 0, 0, 1, 0, 0, 0],
  [0, 1, 1, 1, 0, 1, 1, 1, 0],
  [0, 0, 0, 1, 0, 0, 0, 1, 0],
  [1, 1, 0, 1, 0, 1, 0, 1, 0],
  [0, 0, 0, 0, 0, 1, 1, 1, 0],
  [0, 1, 1, 1, 1, 1, 0, 0, 0],
  [0, 0, 0, 0, 0, 1, 0, 1, 0],
  [1, 1, 1, 1, 0, 0, 0, 1, 2]
];

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡∏°
let robot = { x: 0, y: 0, dir: 'right' };
let initialRobot = { ...robot };
let tileSize = 60;
let isRunning = false;
let commandList = [];
let currentCommand = 0;
let timeLimit = 60; // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
let timeLeft = timeLimit;
let timerInterval = null;
let timerRunning = false;

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á p5.js
function setup() {
  let canvas = createCanvas(9 * tileSize, 9 * tileSize);
  canvas.parent('canvasContainer');
  canvas.mouseClicked(canvasClicked);
  frameRate(30);
}

function draw() {
  background(0);
  drawGrid();
  drawRobot();
  updateStatus();
}

// ‡∏ß‡∏≤‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
function drawGrid() {
  stroke(60); 
  strokeWeight(1);
  
  for (let y = 0; y < 9; y++) {
    for (let x = 0; x < 9; x++) {
      let px = x * tileSize, py = y * tileSize;
      
      if (grid[y][x] === 0) { 
        fill(30); 
        rect(px, py, tileSize, tileSize); 
      }
      else if (grid[y][x] === 1) { 
        fill(90, 90, 120); 
        rect(px, py, tileSize, tileSize); 
      }
      else { 
        fill(0, 255, 255); 
        ellipse(px + tileSize/2, py + tileSize/2, tileSize*0.7); 
      }
    }
  }
}

// ‡∏ß‡∏≤‡∏î‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå
function drawRobot() {
  let rx = robot.x * tileSize + tileSize/2;
  let ry = robot.y * tileSize + tileSize/2;
  
  fill(0, 150, 255); 
  stroke(255); 
  strokeWeight(2);
  ellipse(rx, ry, tileSize*0.6);
  
  stroke(255, 255, 0); 
  strokeWeight(4);
  
  if (robot.dir === 'right') line(rx, ry, rx + tileSize/2, ry);
  if (robot.dir === 'left') line(rx, ry, rx - tileSize/2, ry);
  if (robot.dir === 'up') line(rx, ry, rx, ry - tileSize/2);
  if (robot.dir === 'down') line(rx, ry, rx, ry + tileSize/2);
  
  noStroke();
}

// ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
function canvasClicked() {
  if (isRunning || timerRunning) return;
  
  let x = Math.floor(mouseX / tileSize);
  let y = Math.floor(mouseY / tileSize);
  
  if (x >= 0 && x < 9 && y >= 0 && y < 9 && grid[y][x] !== 1) {
    calculatePathTo(x, y);
  }
}

// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
function calculatePathTo(tx, ty) {
  // ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  if (tx === robot.x && ty === robot.y) {
    setOutput('‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô', 'yellow');
    return;
  }

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
  const desiredDir = calculateDesiredDirection(tx, ty);
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏°‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
  addRotationCommands(desiredDir);
  
  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
  setOutput(`‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á (${tx},${ty})`, 'yellow');
}

// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
function calculateDesiredDirection(tx, ty) {
  const dx = tx - robot.x;
  const dy = ty - robot.y;
  
  if (Math.abs(dx) > Math.abs(dy)) {
    return dx > 0 ? 'right' : 'left';
  } else {
    return dy > 0 ? 'down' : 'up';
  }
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏°‡∏∏‡∏ô
function addRotationCommands(desiredDir) {
  if (robot.dir === desiredDir) return;

  const rotations = getRequiredRotations(robot.dir, desiredDir);
  rotations.forEach(rot => {
    addCommandWithTimer(rot);
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
    robot.dir = updateDirection(robot.dir, rot);
  });
}

// ‡∏´‡∏≤‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏°‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
function getRequiredRotations(currentDir, targetDir) {
  const rotationMap = {
    right: { up: ['rotateLeft'], down: ['rotateRight'], left: ['rotateLeft', 'rotateLeft'] },
    left: { up: ['rotateRight'], down: ['rotateLeft'], right: ['rotateRight', 'rotateRight'] },
    up: { right: ['rotateRight'], left: ['rotateLeft'], down: ['rotateRight', 'rotateRight'] },
    down: { right: ['rotateLeft'], left: ['rotateRight'], up: ['rotateLeft', 'rotateLeft'] }
  };
  
  return rotationMap[currentDir][targetDir] || [];
}

// ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á‡∏´‡∏°‡∏∏‡∏ô
function updateDirection(currentDir, rotation) {
  const dirChanges = {
    rotateLeft: { right: 'up', up: 'left', left: 'down', down: 'right' },
    rotateRight: { right: 'down', down: 'left', left: 'up', up: 'right' }
  };
  return dirChanges[rotation][currentDir];
}

// ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
function move() {
  let nx = robot.x, ny = robot.y;
  
  if (robot.dir === 'right') nx++;
  if (robot.dir === 'left') nx--;
  if (robot.dir === 'up') ny--;
  if (robot.dir === 'down') ny++;
  
  if (nx >= 0 && nx < 9 && ny >= 0 && ny < 9 && grid[ny][nx] !== 1) {
    robot.x = nx; 
    robot.y = ny;
    return true;
  }
  
  setOutput('‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡∏ä‡∏ô‡∏Å‡∏≥‡πÅ‡∏û‡∏á!', 'red');
  resetRobotPosition();
  return false;
}

// ‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô
function rotateLeft() {
  robot.dir = updateDirection(robot.dir, 'rotateLeft');
}

function rotateRight() {
  robot.dir = updateDirection(robot.dir, 'rotateRight');
}

// ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
function updateStatus() {
  document.getElementById('direction').textContent = '‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á: ' + getDirectionText(robot.dir);
  document.getElementById('position').textContent = `‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: (${robot.x},${robot.y})`;
  document.getElementById('steps').textContent = '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: ' + commandList.length;
}

function getDirectionText(dir) {
  const dirMap = { right: '‡∏Ç‡∏ß‡∏≤', left: '‡∏ã‡πâ‡∏≤‡∏¢', up: '‡∏ö‡∏ô', down: '‡∏•‡∏á' };
  return dirMap[dir];
}

// ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
async function executeCommands() {
  if (isRunning) return;
  
  isRunning = true;
  setOutput('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô...', 'yellow');
  
  robot = { ...initialRobot };
  updateStatus();
  
  for (let i = 0; i < commandList.length; i++) {
    if (!timerRunning) break;
    
    highlightCommand(i);
    
    const cmd = commandList[i];
    let success = true;
    
    if (cmd === 'move') {
      success = move();
    } else if (cmd === 'rotateLeft') {
      rotateLeft();
    } else if (cmd === 'rotateRight') {
      rotateRight();
    }
    
    updateStatus();
    await sleep(300);
    
    if (!success) break;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (grid[robot.y][robot.x] === 2) {
      handleWin();
      break;
    }
  }
  
  isRunning = false;
  removeCommandHighlights();
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

function highlightCommand(index) {
  const commands = document.querySelectorAll('.command-item');
  commands.forEach((cmd, i) => {
    cmd.classList.toggle('highlight', i === index);
  });
}

function removeCommandHighlights() {
  document.querySelectorAll('.command-item').forEach(cmd => {
    cmd.classList.remove('highlight');
  });
}

function handleWin() {
  clearInterval(timerInterval);
  timerRunning = false;
  
  const score = calculateScore();
  showWinMessage(score);
}

function calculateScore() {
  const timeScore = Math.floor(timeLeft * 2);
  const stepScore = Math.max(0, 200 - commandList.length * 3);
  const bonus = commandList.length < 15 ? 50 : 0;
  
  return {
    total: timeScore + stepScore + bonus,
    time: timeScore,
    steps: stepScore,
    bonus: bonus
  };
}

function showWinMessage(score) {
  const message = `
    ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏ô‡∏∞! üéâ<br/><br/>
    üïí ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${timeLeft} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (${score.time} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)<br/>
    üìã ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: ${commandList.length} (${score.steps} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)<br/>
    üèÜ ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°: ${score.total} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
  `;
  
  setOutput('‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß!', 'green');
  showAlert(message);
}

// ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
function addCommand(cmd) {
  if (isRunning) return;
  
  // ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡πâ‡∏≥‡∏≠‡∏≠‡∏Å
  commandList.push(cmd);
  renderCommandList();
  
  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
  const cmdNames = {
    move: '‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤',
    rotateLeft: '‡∏´‡∏°‡∏∏‡∏ô‡∏ã‡πâ‡∏≤‡∏¢', 
    rotateRight: '‡∏´‡∏°‡∏∏‡∏ô‡∏Ç‡∏ß‡∏≤'
  };
  setOutput(`‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: ${cmdNames[cmd]}`, 'yellow');
}

// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Event Listeners ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
document.getElementById('moveBtn').onclick = () => {
  if (isRunning) return;
  addCommandWithTimer('move');
};

document.getElementById('rotateLeftBtn').onclick = () => {
  if (isRunning) return;
  addCommandWithTimer('rotateLeft');
};

document.getElementById('rotateRightBtn').onclick = () => {
  if (isRunning) return;
  addCommandWithTimer('rotateRight');
};

function addCommandWithTimer(cmd) {
  if (!timerRunning) startTimer();
  addCommand(cmd);
}

function renderCommandList() {
  const listElement = document.getElementById('commandList');
  listElement.innerHTML = '';
  
  if (commandList.length === 0) {
    listElement.innerHTML = '<p class="text-gray-400 italic">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á</p>';
    return;
  }
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡πÄ‡∏•‡∏Ç‡∏•‡∏≥‡∏î‡∏±‡∏ö
  commandList.forEach((cmd, index) => {
    const item = document.createElement('div');
    item.className = 'command-item';
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏•‡∏Ç‡∏•‡∏≥‡∏î‡∏±‡∏ö
    const numberSpan = document.createElement('span');
    numberSpan.className = 'command-number';
    numberSpan.textContent = (index + 1) + '.';
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
    const textSpan = document.createElement('span');
    textSpan.className = 'command-text';
    textSpan.textContent = getCommandText(cmd);
    
    // ‡∏£‡∏ß‡∏°‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö
    item.appendChild(numberSpan);
    item.appendChild(textSpan);
    item.onclick = () => removeCommand(index);
    
    listElement.appendChild(item);
  });
}

function getCommandText(cmd) {
  const commandNames = {
    move: '‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤',
    rotateLeft: '‡∏´‡∏°‡∏∏‡∏ô‡∏ã‡πâ‡∏≤‡∏¢',
    rotateRight: '‡∏´‡∏°‡∏∏‡∏ô‡∏Ç‡∏ß‡∏≤'
  };
  return commandNames[cmd];
}

function removeCommand(index) {
  if (isRunning) return;
  commandList.splice(index, 1);
  renderCommandList();
}

// ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏•‡∏≤
function startTimer() {
  if (timerRunning) return;
  
  timerRunning = true;
  timeLeft = timeLimit;
  updateTimerDisplay();
  
  timerInterval = setInterval(() => {
    timeLeft--;
    updateTimerDisplay();
    
    if (timeLeft <= 0) {
      handleTimeOut();
    }
  }, 1000);
}

function updateTimerDisplay() {
  const timerElement = document.getElementById('timer') || createTimerElement();
  timerElement.textContent = `‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${timeLeft} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`;
  timerElement.style.color = timeLeft <= 10 ? '#ff5252' : '#4dd0e1';
}

function createTimerElement() {
  const timer = document.createElement('p');
  timer.id = 'timer';
  timer.style.marginTop = '0.5rem';
  timer.style.fontWeight = 'bold';
  document.querySelector('.status').appendChild(timer);
  return timer;
}

function handleTimeOut() {
  clearInterval(timerInterval);
  timerRunning = false;
  
  setOutput('‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤!', 'red');
  showAlert('‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤! ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏û‡πâ');
  resetRobotPosition();
}

// ‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏Å‡∏°
function resetGame() {
  clearInterval(timerInterval);
  timerRunning = false;
  
  robot = { ...initialRobot };
  commandList = [];
  timeLeft = timeLimit;
  
  updateStatus();
  updateTimerDisplay();
  renderCommandList();
  setOutput('', '');
  
  isRunning = false;
  removeCommandHighlights();
  hideAlert();
}

function resetRobotPosition() {
  robot = { ...initialRobot };
  updateStatus();
}

// ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
function setOutput(msg, type) {
  const output = document.getElementById('output');
  output.textContent = msg;
  output.className = `status-output ${type || ''}`;
}

function showAlert(msg) {
  const overlay = document.getElementById('alertOverlay');
  const message = document.getElementById('alertMessage');
  
  message.innerHTML = msg;
  overlay.classList.add('show');
  
  // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏ö‡πÄ‡∏Å‡∏°
  const homeBtn = document.getElementById('homeBtn');
  homeBtn.style.display = msg.includes('‡∏ä‡∏ô‡∏∞') || msg.includes('‡πÅ‡∏û‡πâ') ? 'inline-block' : 'none';
}

function hideAlert() {
  document.getElementById('alertOverlay').classList.remove('show');
}

// Event Listeners
document.getElementById('moveBtn').onclick = () => {
  if (isRunning) return;
  addCommandWithTimer('move');
  setOutput('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤', 'yellow');
};

document.getElementById('rotateLeftBtn').onclick = () => {
  if (isRunning) return;
  addCommandWithTimer('rotateLeft');
  setOutput('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏°‡∏∏‡∏ô‡∏ã‡πâ‡∏≤‡∏¢', 'yellow');
};

document.getElementById('rotateRightBtn').onclick = () => {
  if (isRunning) return;
  addCommandWithTimer('rotateRight');
  setOutput('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏°‡∏∏‡∏ô‡∏Ç‡∏ß‡∏≤', 'yellow');
};

document.getElementById('runBtn').onclick = executeCommands;
document.getElementById('resetBtn').onclick = resetGame;
document.getElementById('clearBtn').onclick = () => {
  commandList = [];
  renderCommandList();
  setOutput('‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß', 'yellow');
};

document.getElementById('alertBtn').onclick = () => {
  hideAlert();
  resetGame();
};

function goHome() {
  window.location.href = "/index.html";
}

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°
resetGame();